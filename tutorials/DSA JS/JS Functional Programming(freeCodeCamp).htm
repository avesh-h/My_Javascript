<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script>
      //This tutorial is about functional programming portion of freeCodeCamp

      //First problem
      //1)Fill in the code for the function incrementer so it returns the value of the global variable fixedValue increased by one.

      //If we don't want to affect or change the value of global variable by accidently by using it inside the function then we going to call that function inside the variable and that variable store the new value but the function would not change or mutate the value of the global variable although he uses the global variable.

      // let fixedValue = 4;

      // function incrementer() {
      //   return fixedValue + 1;
      // }

      // let newValue = incrementer();

      //Here is the example how you should not do it because it can change the global variable

      // The global variable
      // let fixedValue = 4;

      // function incrementer() {
      //   return (fixedValue = fixedValue + 1);
      // }
      // incrementer();
      // console.log(fixedValue); //It gives answer 5

      //2)Let's update the incrementer function to clearly declare its dependencies.

      // Write the incrementer function so it takes an argument, and then returns a result after increasing the value by one.

      //Same example is repeat here we send the global variable inside the function and function uses that and give us disired result without changing the global variable

      // let fixedValue = 4;

      // function incrementer(val) {
      //   return val + 1;
      // }

      // let myVar = incrementer(fixedValue);

      //3)Rewrite the code so the global array bookList is not changed inside either function. The add function should add the given bookName to the end of the array passed to it and return a new array (list). The remove function should remove the given bookName from the array passed to it.

      // Note: Both functions should return an array, and any new parameters should be added before the bookName parameter.

      // const bookList = ["The Hound of the Baskervilles", "On The Electrodynamics of Moving Bodies", "PhilosophiÃ¦ Naturalis Principia Mathematica", "Disquisitiones Arithmeticae"];

      // function add(arr,bookName) {
      //   const newArr = [...arr]
      //    newArr.push(bookName)
      //     return newArr
      // }

      //This is simple method if we want to delete any single element from the array with splice method

      // function remove(arr,bookName) {
      //   const newArr = [...arr]
      //   const book_index = newArr.indexOf(bookName);
      //   if (book_index >= 0) {
      //     newArr.splice(book_index, 1);
      //     return newArr;
      //     }
      // }

      //With filter method
      // function remove(arr, bookName) {
      //   let newArr = [...arr];
      //   const book_index = newArr.indexOf(bookName);
      //   if (book_index >= 0) {
      //     // newArr.splice(book_index, 1);
      //     newArr = newArr.filter((e) => e !== bookName);
      //     return newArr;
      //   }
      // }

      //4)The watchList array holds objects with information on several movies. Use map on watchList to assign a new array of objects to the ratings variable. Each movie in the new array should have only a title key with the name of the film, and a rating key with the IMDB rating. The code in the editor currently uses a for loop to do this, so you should replace the loop functionality with your map expression.

      //WIth for loop

      //       const watchList = [
      //   {
      //     "Title": "Inception",
      //     "Year": "2010",
      //     "Rated": "PG-13",
      //     "Released": "16 Jul 2010",
      //     "Runtime": "148 min",
      //     "Genre": "Action, Adventure, Crime",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Christopher Nolan",
      //     "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
      //     "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
      //     "Language": "English, Japanese, French",
      //     "Country": "USA, UK",
      //     "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
      //     "Metascore": "74",
      //     "imdbRating": "8.8",
      //     "imdbVotes": "1,446,708",
      //     "imdbID": "tt1375666",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "Interstellar",
      //     "Year": "2014",
      //     "Rated": "PG-13",
      //     "Released": "07 Nov 2014",
      //     "Runtime": "169 min",
      //     "Genre": "Adventure, Drama, Sci-Fi",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Jonathan Nolan, Christopher Nolan",
      //     "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
      //     "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
      //     "Language": "English",
      //     "Country": "USA, UK",
      //     "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
      //     "Metascore": "74",
      //     "imdbRating": "8.6",
      //     "imdbVotes": "910,366",
      //     "imdbID": "tt0816692",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "The Dark Knight",
      //     "Year": "2008",
      //     "Rated": "PG-13",
      //     "Released": "18 Jul 2008",
      //     "Runtime": "152 min",
      //     "Genre": "Action, Adventure, Crime",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
      //     "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
      //     "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
      //     "Language": "English, Mandarin",
      //     "Country": "USA, UK",
      //     "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
      //     "Metascore": "82",
      //     "imdbRating": "9.0",
      //     "imdbVotes": "1,652,832",
      //     "imdbID": "tt0468569",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "Batman Begins",
      //     "Year": "2005",
      //     "Rated": "PG-13",
      //     "Released": "15 Jun 2005",
      //     "Runtime": "140 min",
      //     "Genre": "Action, Adventure",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
      //     "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
      //     "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
      //     "Language": "English, Urdu, Mandarin",
      //     "Country": "USA, UK",
      //     "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
      //     "Metascore": "70",
      //     "imdbRating": "8.3",
      //     "imdbVotes": "972,584",
      //     "imdbID": "tt0372784",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "Avatar",
      //     "Year": "2009",
      //     "Rated": "PG-13",
      //     "Released": "18 Dec 2009",
      //     "Runtime": "162 min",
      //     "Genre": "Action, Adventure, Fantasy",
      //     "Director": "James Cameron",
      //     "Writer": "James Cameron",
      //     "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
      //     "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
      //     "Language": "English, Spanish",
      //     "Country": "USA, UK",
      //     "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
      //     "Metascore": "83",
      //     "imdbRating": "7.9",
      //     "imdbVotes": "876,575",
      //     "imdbID": "tt0499549",
      //     "Type": "movie",
      //     "Response": "True"
      //   }
      // ];

      //       const ratings = [];
      // for (let i = 0; i < watchList.length; i++) {
      //   ratings.push({title:watchList[i]["Title"],rating:watchList[i]["imdbRating"]})
      // }
      // console.log(ratings)

      //With Map loop
      // const ratings = watchList.map((e)=>({title:e["Title"],rating:e["imdbRating"]}))

      //4) Write your own Array.prototype.myMap(), which should behave exactly like Array.prototype.map(). You should not use the built-in map method. The Array instance can be accessed in the myMap method using this.

      //this problem is about create your own method which world exactly like map method

      //With for loop method
      // Array.prototype.myMap = function (callback) {
      //   let newArr = [];
      //   for (let i = 0; i < this.length; i++) {
      //     newArr.push(callback(this[i], i, this));
      //   }
      //   return newArr;
      // };

      // let newArr = [
      //   { title: "sdfsfs", number: 3 },
      //   { title: "fdfdfd", number: 5 },
      // ];

      //With forEach method
      // Array.prototype.myMap = function (callback) {
      //   let newArr = [];
      //   this.forEach((e, i, originalArr) => {
      //     newArr.push(callback(e, i, originalArr));
      //   });
      //   return newArr;
      // };

      // let myNewArr = newArr.myMap((e) => e.title);

      // console.log(myNewArr);

      // let theNew = [
      //   { title: "abcd", number: 23 },
      //   { title: "sdfs", number: 223 },
      // ].myMap((e) => e.title);

      // console.log(theNew);

      //5)The variable watchList holds an array of objects with information on several movies. Use a combination of filter and map on watchList to assign a new array of objects with only title and rating keys. The new array should only include objects where imdbRating is greater than or equal to 8.0. Note that the rating values are saved as strings in the object and you may need to convert them into numbers to perform mathematical operations on them.

      //       const watchList = [
      //   {
      //     "Title": "Inception",
      //     "Year": "2010",
      //     "Rated": "PG-13",
      //     "Released": "16 Jul 2010",
      //     "Runtime": "148 min",
      //     "Genre": "Action, Adventure, Crime",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Christopher Nolan",
      //     "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
      //     "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
      //     "Language": "English, Japanese, French",
      //     "Country": "USA, UK",
      //     "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
      //     "Metascore": "74",
      //     "imdbRating": "8.8",
      //     "imdbVotes": "1,446,708",
      //     "imdbID": "tt1375666",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "Interstellar",
      //     "Year": "2014",
      //     "Rated": "PG-13",
      //     "Released": "07 Nov 2014",
      //     "Runtime": "169 min",
      //     "Genre": "Adventure, Drama, Sci-Fi",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Jonathan Nolan, Christopher Nolan",
      //     "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
      //     "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
      //     "Language": "English",
      //     "Country": "USA, UK",
      //     "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
      //     "Metascore": "74",
      //     "imdbRating": "8.6",
      //     "imdbVotes": "910,366",
      //     "imdbID": "tt0816692",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "The Dark Knight",
      //     "Year": "2008",
      //     "Rated": "PG-13",
      //     "Released": "18 Jul 2008",
      //     "Runtime": "152 min",
      //     "Genre": "Action, Adventure, Crime",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
      //     "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
      //     "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
      //     "Language": "English, Mandarin",
      //     "Country": "USA, UK",
      //     "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
      //     "Metascore": "82",
      //     "imdbRating": "9.0",
      //     "imdbVotes": "1,652,832",
      //     "imdbID": "tt0468569",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "Batman Begins",
      //     "Year": "2005",
      //     "Rated": "PG-13",
      //     "Released": "15 Jun 2005",
      //     "Runtime": "140 min",
      //     "Genre": "Action, Adventure",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
      //     "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
      //     "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
      //     "Language": "English, Urdu, Mandarin",
      //     "Country": "USA, UK",
      //     "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
      //     "Metascore": "70",
      //     "imdbRating": "8.3",
      //     "imdbVotes": "972,584",
      //     "imdbID": "tt0372784",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "Avatar",
      //     "Year": "2009",
      //     "Rated": "PG-13",
      //     "Released": "18 Dec 2009",
      //     "Runtime": "162 min",
      //     "Genre": "Action, Adventure, Fantasy",
      //     "Director": "James Cameron",
      //     "Writer": "James Cameron",
      //     "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
      //     "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
      //     "Language": "English, Spanish",
      //     "Country": "USA, UK",
      //     "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
      //     "Metascore": "83",
      //     "imdbRating": "7.9",
      //     "imdbVotes": "876,575",
      //     "imdbID": "tt0499549",
      //     "Type": "movie",
      //     "Response": "True"
      //   }
      // ];

      // const filteredList = watchList.filter(e=>{
      //   if(Number(e["imdbRating"])>=8){
      //     return e
      //   }
      // }).map(e=>({title:e["Title"],rating:e["imdbRating"]}));

      // console.log(filteredList);

      //6)Write your own Array.prototype.myFilter(), which should behave exactly like Array.prototype.filter(). You should not use the built-in filter method. The Array instance can be accessed in the myFilter method using this.

      //This is my created filter method for array

      //In below method the callback function will call for each element of the array and we check the function return in if else method if any callback function will give false return then that element will be not include inside the new array if callback function will return true then that element will be included inside the new array so that's how we created our own custom filter method.

      // Array.prototype.myFilter = function (callback) {
      //   const newArray = [];
      //   for (let i = 0; i < this.length; i++) {
      //     if (callback(this[i], i, this)) {
      //       newArray.push(this[i]);
      //     }
      //   }
      //   return newArray;
      // };

      // let testingArr = [23, 0, "", true, "check", undefined];
      // let ansArr = testingArr.myFilter((item) => item);
      // console.log(ansArr);

      //7)Rewrite the function nonMutatingSplice by using slice instead of splice. It should limit the provided cities array to a length of 3, and return a new array with only the first three items.

      // Do not mutate the original array provided to the function.

      // function nonMutatingSplice(cities) {
      //   return cities.slice(0, 3);
      // }

      // const inputCities = ["Chicago", "Delhi", "Islamabad", "London", "Berlin"];
      // console.log(nonMutatingSplice(inputCities));

      //8)Use the concat method in the nonMutatingConcat function to concatenate attach to the end of original. The function should return the concatenated array.

      // function nonMutatingConcat(original, attach) {
      //   return original.concat(attach);
      // }

      // const first = [1, 2, 3];
      // const second = [4, 5];
      // nonMutatingConcat(first, second);

      //9)Change the nonMutatingPush function so it uses concat to merge newItem to the end of original without mutating original or newItem arrays. The function should return an array.

      // function nonMutatingPush(original, newItem) {
      //   return original.concat(newItem);
      // }

      // const first = [1, 2, 3];
      // const second = [4, 5];
      // nonMutatingPush(first, second);

      //9)The variable watchList holds an array of objects with information on several movies. Use reduce to find the average IMDB rating of the movies directed by Christopher Nolan. Recall from prior challenges how to filter data and map over it to pull what you need. You may need to create other variables, and return the average rating from getRating function. Note that the rating values are saved as strings in the object and need to be converted into numbers before they are used in any mathematical operations.

      //       const watchList = [
      //   {
      //     "Title": "Inception",
      //     "Year": "2010",
      //     "Rated": "PG-13",
      //     "Released": "16 Jul 2010",
      //     "Runtime": "148 min",
      //     "Genre": "Action, Adventure, Crime",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Christopher Nolan",
      //     "Actors": "Leonardo DiCaprio, Joseph Gordon-Levitt, Elliot Page, Tom Hardy",
      //     "Plot": "A thief, who steals corporate secrets through use of dream-sharing technology, is given the inverse task of planting an idea into the mind of a CEO.",
      //     "Language": "English, Japanese, French",
      //     "Country": "USA, UK",
      //     "Awards": "Won 4 Oscars. Another 143 wins & 198 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_SX300.jpg",
      //     "Metascore": "74",
      //     "imdbRating": "8.8",
      //     "imdbVotes": "1,446,708",
      //     "imdbID": "tt1375666",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "Interstellar",
      //     "Year": "2014",
      //     "Rated": "PG-13",
      //     "Released": "07 Nov 2014",
      //     "Runtime": "169 min",
      //     "Genre": "Adventure, Drama, Sci-Fi",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Jonathan Nolan, Christopher Nolan",
      //     "Actors": "Ellen Burstyn, Matthew McConaughey, Mackenzie Foy, John Lithgow",
      //     "Plot": "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
      //     "Language": "English",
      //     "Country": "USA, UK",
      //     "Awards": "Won 1 Oscar. Another 39 wins & 132 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMjIxNTU4MzY4MF5BMl5BanBnXkFtZTgwMzM4ODI3MjE@._V1_SX300.jpg",
      //     "Metascore": "74",
      //     "imdbRating": "8.6",
      //     "imdbVotes": "910,366",
      //     "imdbID": "tt0816692",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "The Dark Knight",
      //     "Year": "2008",
      //     "Rated": "PG-13",
      //     "Released": "18 Jul 2008",
      //     "Runtime": "152 min",
      //     "Genre": "Action, Adventure, Crime",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Jonathan Nolan (screenplay), Christopher Nolan (screenplay), Christopher Nolan (story), David S. Goyer (story), Bob Kane (characters)",
      //     "Actors": "Christian Bale, Heath Ledger, Aaron Eckhart, Michael Caine",
      //     "Plot": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, the caped crusader must come to terms with one of the greatest psychological tests of his ability to fight injustice.",
      //     "Language": "English, Mandarin",
      //     "Country": "USA, UK",
      //     "Awards": "Won 2 Oscars. Another 146 wins & 142 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_SX300.jpg",
      //     "Metascore": "82",
      //     "imdbRating": "9.0",
      //     "imdbVotes": "1,652,832",
      //     "imdbID": "tt0468569",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "Batman Begins",
      //     "Year": "2005",
      //     "Rated": "PG-13",
      //     "Released": "15 Jun 2005",
      //     "Runtime": "140 min",
      //     "Genre": "Action, Adventure",
      //     "Director": "Christopher Nolan",
      //     "Writer": "Bob Kane (characters), David S. Goyer (story), Christopher Nolan (screenplay), David S. Goyer (screenplay)",
      //     "Actors": "Christian Bale, Michael Caine, Liam Neeson, Katie Holmes",
      //     "Plot": "After training with his mentor, Batman begins his fight to free crime-ridden Gotham City from the corruption that Scarecrow and the League of Shadows have cast upon it.",
      //     "Language": "English, Urdu, Mandarin",
      //     "Country": "USA, UK",
      //     "Awards": "Nominated for 1 Oscar. Another 15 wins & 66 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BNTM3OTc0MzM2OV5BMl5BanBnXkFtZTYwNzUwMTI3._V1_SX300.jpg",
      //     "Metascore": "70",
      //     "imdbRating": "8.3",
      //     "imdbVotes": "972,584",
      //     "imdbID": "tt0372784",
      //     "Type": "movie",
      //     "Response": "True"
      //   },
      //   {
      //     "Title": "Avatar",
      //     "Year": "2009",
      //     "Rated": "PG-13",
      //     "Released": "18 Dec 2009",
      //     "Runtime": "162 min",
      //     "Genre": "Action, Adventure, Fantasy",
      //     "Director": "James Cameron",
      //     "Writer": "James Cameron",
      //     "Actors": "Sam Worthington, Zoe Saldana, Sigourney Weaver, Stephen Lang",
      //     "Plot": "A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.",
      //     "Language": "English, Spanish",
      //     "Country": "USA, UK",
      //     "Awards": "Won 3 Oscars. Another 80 wins & 121 nominations.",
      //     "Poster": "http://ia.media-imdb.com/images/M/MV5BMTYwOTEwNjAzMl5BMl5BanBnXkFtZTcwODc5MTUwMw@@._V1_SX300.jpg",
      //     "Metascore": "83",
      //     "imdbRating": "7.9",
      //     "imdbVotes": "876,575",
      //     "imdbID": "tt0499549",
      //     "Type": "movie",
      //     "Response": "True"
      //   }
      // ];

      // function getRating(watchList) {
      //   let averageRating;
      //   let chrisMovies = watchList
      //     .filter((e) => e["Director"] === "Christopher Nolan")
      //     .map((e) => Number(e["imdbRating"]));
      //   let sumOfImdb = chrisMovies.reduce((acc, curr) => {
      //     return acc + curr;
      //   }, 0);
      //   averageRating = sumOfImdb / chrisMovies.length;
      //   return averageRating;
      // }

      //OR
      // function getRating(watchList) {
      //   let chrisMovies = [];
      //   let sumOfImdb = watchList.reduce((acc, curr) => {
      //     if (curr["Director"] === "Christopher Nolan") {
      //       chrisMovies.push(curr);
      //       acc = acc + Number(curr["imdbRating"]);
      //     }
      //     return acc;
      //   }, 0);

      //   return sumOfImdb / chrisMovies.length;
      // }

      //OR

      // function getRating(watchList) {
      //   // let chrisMovies = []
      //   let sumOfImdb = watchList.reduce(
      //     (acc, curr) => {
      //       if (curr["Director"] === "Christopher Nolan") {
      //         acc.count++;
      //         acc.sum = acc.sum + Number(curr["imdbRating"]);
      //       }
      //       return acc;
      //     },
      //     { sum: 0, count: 0 }
      //   );

      //   console.log(sumOfImdb);
      //   return sumOfImdb.sum / sumOfImdb.count;
      // }

      // console.log(getRating(watchList));

      //10)Complete the code for the squareList function using any combination of map(), filter(), and reduce(). The function should return a new array containing the squares of only the positive integers (decimal numbers are not integers) when an array of real numbers is passed to it. An example of an array of real numbers is [-3, 4.8, 5, 3, -3.2].

      // Note: Your function should not use any kind of for or while loops or the forEach() function.

      // const squareList = (arr) => {
      //   let newArr = arr
      //     .filter((e) => {
      //       if (e > 0 && Number.isInteger(e)) {
      //         return e;
      //       }
      //     })
      //     .map((e) => e * e);
      //   return newArr;
      // };

      //OR
      // const squareList = (arr) => {
      //   return arr
      //     .filter((num) => num > 0 && num % parseInt(num) === 0)
      //     .map((num) => Math.pow(num, 2));
      // };

      // const squaredIntegers = squareList([-3, 4.8, 5, 3, -3.2]);

      //11) Use the sort method in the alphabeticalOrder function to sort the elements of arr in alphabetical order. The function should return the sorted array.

      //       function alphabeticalOrder(arr) {
      //   arr.sort((a,b)=>{
      //     a.toLowerCase();
      //     b.toLowerCase()
      //     if(a > b){
      //       return 1
      //     }else{
      //       return -1
      //     }
      //   })
      //   console.log(arr)
      //   return arr
      // }

      //OR

      // function alphabeticalOrder(arr) {
      //   arr.sort((a, b) => {
      //     return a === b ? 0 : a > b ? 1 : -1;
      //   });
      //   return arr;
      // }

      // alphabeticalOrder(["a", "d", "c", "a", "z", "g"]);

      //12)Use the sort method in the nonMutatingSort function to sort the elements of an array in ascending order. The function should return a new array, and not mutate the globalArray variable.

      // const globalArray = [5, 6, 3, 2, 9];

      // function nonMutatingSort(arr) {
      //   let newArr = [...arr];
      //   newArr.sort((a, b) => {
      //     return a === b ? 0 : a < b ? -1 : 1;
      //   });
      //   return newArr;
      // }

      //OR

      // const globalArray = [5, 6, 3, 2, 9];

      // function nonMutatingSort(arr) {
      //   return [].concat(arr).sort((a, b) => a - b);
      // }

      // nonMutatingSort(globalArray);

      //13)Use the split method inside the splitify function to split str into an array of words. The function should return the array. Note that the words are not always separated by spaces, and the array should not contain punctuation.

      // function splitify(str) {
      //   return str.split(/\W/);
      // }

      // splitify("Hello World,I-am code");

      //14)Use the join method (among others) inside the sentensify function to make a sentence from the words in the string str. The function should return a string. For example, I-like-Star-Wars would be converted to I like Star Wars. For this challenge, do not use the replace method.

      // function sentensify(str) {
      //   return str.split(/\W/).join(" ");
      // }

      // sentensify("The.force.is.strong.with.this.one");

      //15)Fill in the urlSlug function so it converts a string title and returns the hyphenated version for the URL. You can use any of the methods covered in this section, and don't use replace. Here are the requirements:

      // The input is a string with spaces and title-cased words

      // The output is a string with the spaces between words replaced by a hyphen (-)

      // The output should be all lower-cased letters

      // The output should not have any spaces

      // function urlSlug(title) {
      //   return title
      //     .toLowerCase()
      //     .split(" ")
      //     .filter((e) => e)
      //     .join("-");
      // }
      // urlSlug(" Winter Is  Coming");

      // Curried function example
      // function unCurried(x, y) {
      //   return x + y;
      // }

      // function curried(x) {
      //   return function (y) {
      //     return x + y;
      //   };
      // }

      // const curried = (x) => (y) => x + y;

      // curried(1)(2);

      // function impartial(x, y, z) {
      //   return x + y + z;
      // }

      // const partialFn = impartial.bind(this, 1, 2);
      // partialFn(10); // 13

      //16)Fill in the body of the add function so it uses currying to add parameters x, y, and z.

      // function add(x) {
      //   return function (y) {
      //     return function (z) {
      //       return x + y + z;
      //     };
      //   };
      // }

      // add(10)(20)(30);
    </script>
  </body>
</html>
